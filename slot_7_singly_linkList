class Student {
    String studentCode;
    String fullName;
    String dateOfBirth;
    String address;
    String classCode;

    Student() {}

    Student(String code, String name, String dob, String addr, String classCode) {
        studentCode = code;
        fullName = name;
        dateOfBirth = dob;
        address = addr;
        this.classCode = classCode;
    }

    public String toString() {
        return "(" + studentCode + ", " + fullName + ", " + dateOfBirth + ", " + address + ", " + classCode + ") ";
    }
}

class Node {
    Student info;
    Node next;

    Node() {}

    Node(Student x, Node q) {
        info = x;
        next = q;
    }

    Node(Student x) {
        this(x, null);
    }
}

public class MyList {
    Node head, tail;

    MyList() {
        head = tail = null;
    }

    boolean isEmpty() {
        return (head == null);
    }

    void clear() {
        head = tail = null;
    }

 
    void visit(Node p) {
        if (p != null)
            System.out.print(p.info);
    }

    void traverse() {
        Node p = head;
        while (p != null) {
            visit(p);
            p = p.next;
        }
        System.out.println();
    }

   // (1) 
    void addLast(Student x) {
        Node q = new Node(x);
        if (isEmpty()) {
            head = tail = q;
            return;
        }
        tail.next = q;
        tail = q;
    }

 // (2)
    Node searchByName(String xName) {
        Node p = head;
        while (p != null) {
            if (p.info.fullName.equals(xName))
                return p;
            p = p.next;
        }
        return null;
    }
  // (3)
    void addFirst(Student x) {
        Node q = new Node(x);
        q.next = head;
        head = q;
        if (tail == null) {
            tail = q;
        }
    }

       // (4)
    void insertAfter(Node q, Student x) {
        if (q == null)
            return;
        Node newNode = new Node(x, q.next);
        q.next = newNode;
        if (q == tail) {
            tail = newNode;
        }
    }

    // (5)
    void insertBefore(Node q, Student x) {
        if (q == null)
            return;
        if (q == head) {
            addFirst(x);
            return;
        }
        Node p = head;
        while (p != null && p.next != q) {
            p = p.next;
        }
        if (p != null) {
            insertAfter(p, x);
        }
    }

    // (6)
    void remove(Node q) {
        if (q == null)
            return;
        if (q == head) {
            head = head.next;
            if (head == null) {
                tail = null;
            }
            return;
        }
        Node p = head;
        while (p != null && p.next != q) {
            p = p.next;
        }
        if (p != null) {
            p.next = q.next;
            if (q == tail) {
                tail = p;
            }
        }
    }

    // (7)
    void remove(String xName) {
        Node p = head;
        Node prev = null;
        while (p != null) {
            if (p.info.fullName.equals(xName)) {
                if (p == head) {
                    head = head.next;
                    if (head == null) {
                        tail = null;
                    }
                } else {
                    prev.next = p.next;
                    if (p == tail) {
                        tail = prev;
                    }
                }
                return;
            }
            prev = p;
            p = p.next;
        }
    }
void addMany(String[] studentCodes, String[] fullNames, String[] dateOfBirths, String[] addresses, String[] classCodes) {
        int n = studentCodes.length;
        for (int i = 0; i < n; i++) {
            addLast(new Student(studentCodes[i], fullNames[i], dateOfBirths[i], addresses[i], classCodes[i]));
        }
    }
}


public class Main {
    public static void main(String[] args) {
        MyList studentList = new MyList();

        // Adding some students to the list
        studentList.addMany(
            new String[]{"1", "2", "3", "4", "5"},
            new String[]{"Alice", "Bob", "Charlie", "David", "Eve"},
            new String[]{"1990-01-01", "1995-03-15", "1992-07-20", "1998-11-30", "2000-05-10"},
            new String[]{"123 Main St", "456 Elm St", "789 Oak St", "101 Pine St", "202 Cedar St"},
            new String[]{"ClassA", "ClassB", "ClassC", "ClassA", "ClassB"}
        );

        System.out.println("Original Student List:");
        studentList.traverse();
        // (7)
        // (8) Remove students with a specific age
        studentList.remove("1990-01-01");

        // (9) Remove all students with a specific age
        studentList.removeAll("1990-01-01");

        System.out.println("\nAfter Removing Students by Age:");
        studentList.traverse();

        // (10) Get the node at a specific position
        Node nodeAtPosition = studentList.pos(2);


        // (11) Remove a student at a specific position
        studentList.removePos(1);

        System.out.println("\nAfter Removing Student at Position 1:");
        studentList.traverse();

        // (12) Sort the list by student names
        studentList.sortByName();

        System.out.println("\nAfter Sorting by Name:");
        studentList.traverse();

        // (13) Sort the list by student ages
        studentList.sortByAge();

        System.out.println("\nAfter Sorting by Age:");
        studentList.traverse();

        // (16) Reverse the list
        studentList.reverse();

        System.out.println("\nAfter Reversing the List:");
        studentList.traverse();

        // (17) Find the student with the maximum age
        Node maxAgeNode = studentList.findMaxAge();
        

        // (20) Sort a portion of the list by student ages (from position 1 to 3)
        studentList.sortByAge(1, 3);

        System.out.println("\nAfter Sorting a Portion by Age (Position 1 to 3):");
        studentList.traverse();

        // (21) Reverse a portion of the list (from position 1 to 3)
        studentList.reverse(1, 3);

        System.out.println("\nAfter Reversing a Portion (Position 1 to 3):");
        studentList.traverse();
    }
}
